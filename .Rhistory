install.packages("ggplot2")
data <- read.csv('basepro.csv', sep = ';', rowNames = TRUE)
# Big Data project for M2 EKAP
library(readxl)
library(gets)
library(glmnet)
library(corrplot)
library(tidyverse)
library(doParallel)
library(tseries)
library(lmtest)
library(ggplot2)
library(rpart)
library(randomForest)
library(gbm)
library(caret)
library(partykit)
library(PerformanceAnalytics)
library(FinTS)
library(diveRsity)
library(SIS)
library(msaenet)
library(ncvreg)
library(rbridge)
library(RRF)
library(regclass)
setwd("C:/Users/Lucas/Desktop/Cours/Big Data")
getwd()
data = data.frame(read_excel('data.xlsx')[1 : 980,])
#On transforme l'indice S&P en rentabilitÃ©
y <- as.matrix(data[, 2])
y <- diff(log(y))
data <- data[- 1, ]
stat.tests <- function(data){
var_non_stat <<- data[- 1,]
for(i in 1 : ncol(data)){
adf <- FALSE
kpss <- FALSE
q <- FALSE
ar <- FALSE
if(adf.test(data[, i])$p.value > 0.05){
adf = TRUE
}
if(kpss.test(data[, i])$p.value < 0.05){
kpss = TRUE
}
if(Box.test(data[, i], lag = 1, type = c("Ljung-Box"))$p.value < 0.05){
q = TRUE
}
if(arima(x = y, order = c(1,0,0))[["coef"]][["ar1"]] > 0.7){
ar = TRUE
}
if(adf & kpss | adf & q | adf & ar | kpss & ar | kpss & q | ar & q == TRUE){
print(paste('variable :', names(data[i]), 'non-stationnaire'), sep = ' ')
var_non_stat[i] <<- diff(data[, i])
names(var_non_stat[i]) <<- names(data[, i])
}
}
}
# Checking for stationarity
stat.tests(data)
data_clean = var_non_stat
for (i in 1 : 29){
y=ts(var_non_stat[, i])
clean=Return.clean(y, method = "boudt")
clean=ts(clean)
data_clean[, i] <- clean
names(data_clean[i]) <- names(data[, i])
}
var_non_stat$num <- seq(1, 978, 1)
data_clean$num <- seq(1, 978, 1)
x <- as.matrix(scale(data_clean[, - c(2, 4, 18, 19, 27, 28)], center = TRUE, scale = TRUE)) #regressors CRSP and DP are equal to Y
y <- as.matrix(scale(data_clean[, 27], center = TRUE, scale = TRUE)) #Us stock returns
y <- as.numeric(y)
lag_y <- data_clean$returns
lag_y <- lag_y[- 1]
data_clean=data_clean[,-c(2, 18, 19, 28)]
data_clean <- data_clean[- 978,]
data_clean$lag <- lag_y
View(data_clean)
View(data_clean)
View(data_clean)
View(data_clean)
