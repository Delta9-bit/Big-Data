varUsed(RRF)
tune_RRF <- tuneRRF(returns ~ ., data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RRF <- tuneRRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RRF <- tuneRRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 1, improve = 0.05)
tune_RRF <- tuneRRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 1, improve = 0.05)
tune_RRF <- tuneRRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 3, improve = 0.05)
tune_RRF <- tuneRRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 5, improve = 0.05)
tune_RRF <- tuneRRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
px <- ncol(data) - 1
valntree <- 100
valmtry <- 16
valnodesize <- 20
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(rdf)
plot(rdf, main = NULL)
px <- ncol(data) - 1
valntree <- 500
valmtry <- 16
valnodesize <- 20
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(rdf)
plot(rdf, main = NULL)
px <- ncol(data) - 1
valntree <- 500
valmtry <- 16
valnodesize <- 20
px <- ncol(data) - 1
valntree <- 500
valmtry <- 16
valnodesize <- 20
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
plot(rdf, main = NULL)
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
px <- ncol(data) - 1
valntree <- 200
valmtry <- 16
valnodesize <- 20
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
importance(rdf, scale = TRUE)
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(rdf)
plot(rdf, main = NULL)
importance(rdf, scale = TRUE)
importance(RRF)
importance(rdf
)
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(rdf)
plot(rdf, main = NULL)
importance(rdf)
varImportance <- varImp(rdf_grid)
plot(varImportance)
fit.control <- trainControl(method = 'repeatedcv', number = 5, repeats = 10,
search = 'grid')
tune.mtry <- expand.grid(.mtry = (14 : 16))
rdf_grid <- train(returns ~ ., data = data_clean[, 1 : 27], method = 'rf', metric = 'RMSE',
tuneGrid = tune.mtry, trControl = fit.control)
px <- ncol(data) - 1
valntree <- 200
valmtry <- 16
valnodesize <- 20
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(rdf)
plot(rdf, main = NULL)
importance(rdf)
RRF <- RRF(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(RRF)
importance(RRF)
plot(RRF)
feaSec(RRF)
feaSet(RRF)
print(RRF$feaSet)
importance(RRF)
plot(RRF)
plot(RRF$feaSet)
varImpPlot(rdf)
px <- ncol(data) - 1
valntree <- 200
valmtry <- 16
valnodesize <- 20
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
varImpPlot(rdf)
varImpPlot(rdf, type = 2)
varImpPlot(rdf, type = 1)
importance(rdf, type = 1)
RRF <- RRF(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
plot(RRF)
varUsed(RRF)
print(RRF)
print(RRF$feaSet)
importance(RRF)
varImpPlot(RRF, type = 1)
varImpPlot(RRF)
varImpPlot(RRF, type = 1)
varImpPlot(RRF, type = 2)
print(RRF)
print(rdf)
varImpPlot(RRF, type = 1)
varImpPlot(RRF, type = 0)
varImpPlot(RRF, type = 3)
varImpPlot(RRF, type = 1)
varImpPlot(RRF, type = 1, main = NULL)
varImpPlot(RRF, type = 2, main = NULL)
select_rdf <- randomForest(returns ~ CRSP_SPvw + CRSP_vxw + E12 + D12 + D.P + b.m + dfr + ltr + svar + EP + lty,
data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
View(data_clean)
select_rdf <- randomForest(returns ~ CRSP_SPvw + CRSP_SPvxw + E12 + D12 + D.P + b.m + dfr + ltr + svar + EP + lty,
data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
select_rdf <- randomForest(returns ~ CRSP_SPvw + CRSP_SPvwx + E12 + D12 + D.P + b.m + dfr + ltr + svar + EP + lty,
data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
px <- ncol(data) - 1
valntree <- 200
valmtry <- 16
valnodesize <- 20
select_rdf <- randomForest(returns ~ CRSP_SPvw + CRSP_SPvwx + E12 + D12 + D.P + b.m + dfr + ltr + svar + EP + lty,
data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
View(x)
x_RF <- data_clean[, c(18, 19, 6, 1, 2, 7, 24, 15, 17, 11, 4, 20)]
y_RF <- data_clean[, 27]
tune_RF <- tuneRF(x_RF, y_RF, ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
x_RF <- data_clean[, - 1]
y_RF <- data_clean[, 27]
px <- ncol(data) - 1
valntree <- 200
valmtry <- 16
valnodesize <- 20
rdf <- randomForest(returns ~ ., data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
plot(rdf, main = NULL)
tune_RF <- tuneRF(x, y, data = data_clean[, 1 : 27], ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
x_RF <- data_clean[, c(18, 19, 6, 1, 2, 7, 24, 15, 17, 11, 4, 20)]
y_RF <- data_clean[, 27]
tune_RF <- tuneRF(x_RF, y_RF, ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RF <- tuneRF(x_RF, y_RF, ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
tune_RF <- tuneRF(x_RF, y_RF, ntreeTry = 100, mtryStart = 1, stepFactor = 2, improve = 0.05)
valmtry <- 8
select_rdf <- randomForest(returns ~ CRSP_SPvw + CRSP_SPvwx + E12 + D12 + D.P + b.m + dfr + ltr + svar + EP + lty,
data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(select_rdf)
plot(select_rdf, main = NULL)
select_rdf <- randomForest(returns ~ CRSP_SPvw + CRSP_SPvwx + E12 + D12 + D.P + b.m + dfr + ltr + svar + EP + lty,
data = data_clean[, 1 : 27], ntree = valntree, mtry = valmtry,
nodesize = valnodesize, important = TRUE, proximity = TRUE, nPerm = 1)
print(select_rdf)
plot(select_rdf, main = NULL)
LASSO_OLS <- lm(returns ~ data[, - 23])
LASSO_OLS <- lm(returns ~ data_clean[, - 23], data = data_clean)
LASSO_OLS <- lm(returns ~ . - dfy, data = data_clean)
plot(LASSO_OLS)
plot(LASSO_OLS$residuals)
barplot(LASSO_OLS$residuals)
hist(LASSO_OLS$residuals)
print(sum(LASSO_OLS$residuals))
View(LASSO_OLS)
summary(LASSO_OLS)
Ridge_OLS <- lm(returns ~ ., data = data_clean)
summary(Ridge_OLS)
lag_y <- data_clean$returns
lag_y <- lag_y[- 1]
data_clean <- data_clean[- 1,]
data_clean$lag <- lag_y
View(data_clean)
LASSO_OLS <- lm(returns ~ . - dfy, data = data_clean)
summary(LASSO_OLS)
Ridge_OLS <- lm(returns ~ ., data = data_clean)
summary(Ridge_OLS)
EN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + IP + dfr + epu + lag)
summary(EN_OLS)
SCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + infl + corpr + svar + CRSP_vw + IP + dfr + dfy + epu + lag)
summary(SCAD_OLS)
aLASSO_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + IP + dfr + lag)
summary(aLASSO_OLS)
WF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + dfr + lag)
summary(WF_OLS)
aEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + svar + CRSP_vw + IP + dfr + dfy + epu + lag)
summary(aEN_OLS)
aSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + IP + dfr + epu + lag)
summary(aSCAD_OLS)
msaEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + CRSP_vw + CRSP_vwx + IP + dfr + epu + lag)
summary(msaEN_OLS)
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_vw + IP + dfr + epu + lag)
summary(msaSCAD_OLS)
RF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + ltr + lty + svar + CRSP_vw + CRSP_vwx + IP + dfr + lag)
summary(RF_OLS)
LASSO_OLS <- lm(returns ~ . - dfy, data = data_clean)
summary(LASSO_OLS)
Ridge_OLS <- lm(returns ~ ., data = data_clean)
summary(Ridge_OLS)
EN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + IP + dfr + epu + lag, data = data_clean)
summary(EN_OLS)
SCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + infl + corpr + svar + CRSP_vw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(SCAD_OLS)
aLASSO_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + IP + dfr + lag, data = data_clean)
summary(aLASSO_OLS)
WF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + dfr + lag, data = data_clean)
summary(WF_OLS)
aEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + svar + CRSP_vw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(aEN_OLS)
aSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + IP + dfr + epu + lag, data = data_clean)
summary(aSCAD_OLS)
msaEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + CRSP_vw + CRSP_vwx + IP + dfr + epu + lag, data = data_clean)
summary(msaEN_OLS)
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_vw + IP + dfr + epu + lag, data = data_clean)
summary(msaSCAD_OLS)
RF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + ltr + lty + svar + CRSP_vw + CRSP_vwx + IP + dfr + lag, data = data_clean)
LASSO_OLS <- lm(returns ~ . - dfy, data = data_clean)
summary(LASSO_OLS)
Ridge_OLS <- lm(returns ~ ., data = data_clean)
summary(Ridge_OLS)
EN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + IP + dfr + epu + lag, data = data_clean)
summary(EN_OLS)
SCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + infl + corpr + svar + CRSP_vw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(SCAD_OLS)
aLASSO_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + IP + dfr + lag, data = data_clean)
summary(aLASSO_OLS)
WF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_vw + CRSP_vwx + dfr + lag, data = data_clean)
summary(WF_OLS)
aEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + svar + CRSP_vw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(aEN_OLS)
aSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + IP + dfr + epu + lag, data = data_clean)
summary(aSCAD_OLS)
msaEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + CRSP_vw + CRSP_vwx + IP + dfr + epu + lag, data = data_clean)
summary(msaEN_OLS)
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_vw + IP + dfr + epu + lag, data = data_clean)
summary(msaSCAD_OLS)
RF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + ltr + lty + svar + CRSP_vw + CRSP_vwx + IP + dfr + lag, data = data_clean)
summary(RF_OLS)
View(data_clean)
View(data_clean)
LASSO_OLS <- lm(returns ~ . - dfy, data = data_clean)
summary(LASSO_OLS)
Ridge_OLS <- lm(returns ~ ., data = data_clean)
summary(Ridge_OLS)
EN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_SPvw + CRSP_SPvwx + IP + dfr + epu + lag, data = data_clean)
summary(EN_OLS)
SCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + infl + corpr + svar + CRSP_SPvw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(SCAD_OLS)
aLASSO_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_SPvw + CRSP_SPvwx + IP + dfr + lag, data = data_clean)
summary(aLASSO_OLS)
WF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_SPvw + CRSP_SPvwx + dfr + lag, data = data_clean)
summary(WF_OLS)
aEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + svar + CRSP_SPvw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(aEN_OLS)
aSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + IP + dfr + epu + lag, data = data_clean)
summary(aSCAD_OLS)
msaEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + CRSP_SPvw + CRSP_SPvwx + IP + dfr + epu + lag, data = data_clean)
summary(msaEN_OLS)
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_SPvw + IP + dfr + epu + lag, data = data_clean)
summary(msaSCAD_OLS)
RF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + ltr + lty + svar + CRSP_SPvw + CRSP_SPvwx + IP + dfr + lag, data = data_clean)
summary(RF_OLS)
View(data_clean)
# Big Data project for M2 EKAP
library(readxl)
library(gets)
library(glmnet)
library(corrplot)
library(tidyverse)
library(doParallel)
library(tseries)
library(lmtest)
library(ggplot2)
library(rpart)
library(randomForest)
library(gbm)
library(caret)
library(partykit)
library(PerformanceAnalytics)
library(FinTS)
library(diveRsity)
library(SIS)
library(msaenet)
library(ncvreg)
library(rbridge)
library(RRF)
setwd("/Users/Lucas/Desktop/Cours/Big Data")
data = data.frame(read_excel('data.xlsx')[1 : 980,])
summary(data)
y <- as.matrix(scale(data[, 2], center = TRUE, scale = FALSE))
y <- diff(y)
data <- data[- 1, ]
data$returns <- y
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_SPvw + IP + dfr + epu + lag, data = data_clean)
summary(msaSCAD_OLS)
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_SPvw + IP + dfr + epu + lag, data = data)
summary(msaSCAD_OLS)
# Big Data project for M2 EKAP
library(readxl)
library(gets)
library(glmnet)
library(corrplot)
library(tidyverse)
library(doParallel)
library(tseries)
library(lmtest)
library(ggplot2)
library(rpart)
library(randomForest)
library(gbm)
library(caret)
library(partykit)
library(PerformanceAnalytics)
library(FinTS)
library(diveRsity)
library(SIS)
library(msaenet)
library(ncvreg)
library(rbridge)
library(RRF)
setwd("/Users/Lucas/Desktop/Cours/Big Data")
data = data.frame(read_excel('data.xlsx')[1 : 980,])
summary(data)
y <- as.matrix(scale(data[, 2], center = TRUE, scale = FALSE))
y <- diff(y)
data <- data[- 1, ]
data$returns <- y
ggplot(mapping = aes(x = date, y = Index), data)+
geom_line(col = 'steelblue')+
theme_minimal()
ggplot(mapping = aes(x = date, y = returns), data)+
geom_line(col = 'steelblue')+
theme_minimal()
# Loop for stationarity tests
stat.tests <- function(data){
var_non_stat <<- data[- 1,]
for(i in 1 : ncol(data)){
adf <- FALSE
kpss <- FALSE
q <- FALSE
ar <- FALSE
if(adf.test(data[, i])$p.value > 0.05){
adf = TRUE
}
if(kpss.test(data[, i])$p.value < 0.05){
kpss = TRUE
}
if(Box.test(data[, i], lag = 1, type = c("Ljung-Box"))$p.value < 0.05){
q = TRUE
}
if(arima(x = y, order = c(1,0,0))[["coef"]][["ar1"]] > 0.7){
ar = TRUE
}
if(adf & kpss | adf & q | adf & ar | kpss & ar | kpss & q | ar & q == TRUE){
print(paste('variable :', names(data[i]), 'non-stationnaire'), sep = ' ')
var_non_stat[i] <<- diff(data[, i])
names(var_non_stat[i]) <<- names(data[, i])
}
}
}
# Checking for stationarity
stat.tests(data)
# Outliers detection
data_clean = var_non_stat
for (i in 1 : 28){
y=ts(var_non_stat[, i])
clean=Return.clean(y, method = "boudt")
clean=ts(clean)
data_clean[, i] <- clean
names(data_clean[i]) <- names(data[, i])
}
var_non_stat$num <- seq(1, 978, 1)
data_clean$num <- seq(1, 978, 1)
# Outliers plots
for (i in 1 : 28){
print(ggplot(mapping = aes(x = num, y = var_non_stat[, i]), var_non_stat)+
geom_line(color = 'red')+
geom_line(aes(x = num, y = data_clean[, i]), data = data_clean, col = 'steelblue')+
theme_minimal()+
ggtitle(names(data_clean[i]))+
ylab(names(data_clean[i]))+
xlab('time'))
}
View(data_clean)
lag_y <- data_clean$returns
lag_y <- lag_y[- 1]
data_clean <- data_clean[- 1,]
data_clean$lag <- lag_y
# Big Data project for M2 EKAP
library(readxl)
library(gets)
library(glmnet)
library(corrplot)
library(tidyverse)
library(doParallel)
library(tseries)
library(lmtest)
library(ggplot2)
library(rpart)
library(randomForest)
library(gbm)
library(caret)
library(partykit)
library(PerformanceAnalytics)
library(FinTS)
library(diveRsity)
library(SIS)
library(msaenet)
library(ncvreg)
library(rbridge)
library(RRF)
setwd("/Users/Lucas/Desktop/Cours/Big Data")
data = data.frame(read_excel('data.xlsx')[1 : 980,])
summary(data)
y <- as.matrix(scale(data[, 2], center = TRUE, scale = FALSE))
y <- diff(y)
data <- data[- 1, ]
data$returns <- y
ggplot(mapping = aes(x = date, y = Index), data)+
geom_line(col = 'steelblue')+
theme_minimal()
ggplot(mapping = aes(x = date, y = returns), data)+
geom_line(col = 'steelblue')+
theme_minimal()
# Loop for stationarity tests
stat.tests <- function(data){
var_non_stat <<- data[- 1,]
for(i in 1 : ncol(data)){
adf <- FALSE
kpss <- FALSE
q <- FALSE
ar <- FALSE
if(adf.test(data[, i])$p.value > 0.05){
adf = TRUE
}
if(kpss.test(data[, i])$p.value < 0.05){
kpss = TRUE
}
if(Box.test(data[, i], lag = 1, type = c("Ljung-Box"))$p.value < 0.05){
q = TRUE
}
if(arima(x = y, order = c(1,0,0))[["coef"]][["ar1"]] > 0.7){
ar = TRUE
}
if(adf & kpss | adf & q | adf & ar | kpss & ar | kpss & q | ar & q == TRUE){
print(paste('variable :', names(data[i]), 'non-stationnaire'), sep = ' ')
var_non_stat[i] <<- diff(data[, i])
names(var_non_stat[i]) <<- names(data[, i])
}
}
}
# Checking for stationarity
stat.tests(data)
# Outliers detection
data_clean = var_non_stat
for (i in 1 : 28){
y=ts(var_non_stat[, i])
clean=Return.clean(y, method = "boudt")
clean=ts(clean)
data_clean[, i] <- clean
names(data_clean[i]) <- names(data[, i])
}
var_non_stat$num <- seq(1, 978, 1)
data_clean$num <- seq(1, 978, 1)
# Outliers plots
for (i in 1 : 28){
print(ggplot(mapping = aes(x = num, y = var_non_stat[, i]), var_non_stat)+
geom_line(color = 'red')+
geom_line(aes(x = num, y = data_clean[, i]), data = data_clean, col = 'steelblue')+
theme_minimal()+
ggtitle(names(data_clean[i]))+
ylab(names(data_clean[i]))+
xlab('time'))
}
# Desc. Statistics
data_clean <- data_clean[, -c(1, 2)]
View(data_clean)
lag_y <- data_clean$returns
lag_y <- lag_y[- 1]
data_clean <- data_clean[- 978,]
data_clean$lag <- lag_y
LASSO_OLS <- lm(returns ~ . - dfy, data = data_clean)
summary(LASSO_OLS)
Ridge_OLS <- lm(returns ~ ., data = data_clean)
summary(Ridge_OLS)
EN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_SPvw + CRSP_SPvwx + IP + dfr + epu + lag, data = data_clean)
summary(EN_OLS)
SCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + infl + corpr + svar + CRSP_SPvw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(SCAD_OLS)
aLASSO_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_SPvw + CRSP_SPvwx + IP + dfr + lag, data = data_clean)
summary(aLASSO_OLS)
WF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + svar + CRSP_SPvw + CRSP_SPvwx + dfr + lag, data = data_clean)
summary(WF_OLS)
aEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + svar + CRSP_SPvw + IP + dfr + dfy + epu + lag, data = data_clean)
summary(aEN_OLS)
aSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + IP + dfr + epu + lag, data = data_clean)
summary(aSCAD_OLS)
msaEN_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + Rfree + corpr + CRSP_SPvw + CRSP_SPvwx + IP + dfr + epu + lag, data = data_clean)
summary(msaEN_OLS)
msaSCAD_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + CRSP_SPvw + IP + dfr + epu + lag, data = data_clean)
summary(msaSCAD_OLS)
RF_OLS <- lm(returns ~ D12 + D.P + E12 + b.m + ltr + lty + svar + CRSP_SPvw + CRSP_SPvwx + IP + dfr + lag, data = data_clean)
summary(RF_OLS)
