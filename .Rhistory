geom_line(col = 'steelblue')+
theme_minimal()
ggplot(mapping = aes(x = date, y = returns), data)+
geom_line(col = 'steelblue')+
theme_minimal()
# Loop for stationarity tests
stat.tests <- function(data){
var_non_stat <<- data[- 1,]
for(i in 1 : ncol(data)){
adf <- FALSE
kpss <- FALSE
q <- FALSE
ar <- FALSE
if(adf.test(data[, i])$p.value > 0.05){
adf = TRUE
}
if(kpss.test(data[, i])$p.value < 0.05){
kpss = TRUE
}
if(Box.test(data[, i], lag = 1, type = c("Ljung-Box"))$p.value < 0.05){
q = TRUE
}
if(arima(x = y, order = c(1,0,0))[["coef"]][["ar1"]] > 0.7){
ar = TRUE
}
if(adf & kpss | adf & q | adf & ar | kpss & ar | kpss & q | ar & q == TRUE){
print(paste('variable :', names(data[i]), 'non-stationnaire'), sep = ' ')
var_non_stat[i] <<- diff(data[, i])
names(var_non_stat[i]) <<- names(data[, i])
}
}
}
# Checking for stationarity
stat.tests(data)
# Outliers detection
data_clean = var_non_stat
for (i in 1 : 28){
y=ts(var_non_stat[, i])
clean=Return.clean(y, method = "boudt")
clean=ts(clean)
data_clean[, i] <- clean
names(data_clean[i]) <- names(data[, i])
}
var_non_stat$num <- seq(1, 978, 1)
data_clean$num <- seq(1, 978, 1)
# Outliers plots
for (i in 1 : 28){
print(ggplot(mapping = aes(x = num, y = var_non_stat[, i]), var_non_stat)+
geom_line(color = 'red')+
geom_line(aes(x = num, y = data_clean[, i]), data = data_clean, col = 'steelblue')+
theme_minimal()+
ggtitle(names(data_clean[i]))+
ylab(names(data_clean[i]))+
xlab('time'))
}
# Desc. Statistics
data_clean <- data_clean[, -c(1, 2)]
for(i in 1:28){
print(names(data_clean[i]))
print(FinTS.stats(data_clean[, i]))
}
View(data_clean)
x <- as.matrix(scale(data_clean[, - c(27, 28)], center = TRUE, scale = TRUE))
y <- as.matrix(scale(data_clean[, 27], center = TRUE, scale = TRUE))
y <- as.numeric(y)
ARX <- arx(data_clean$returns, mc = TRUE, ar = 1,mxreg = mX, vcov.type = 'white')
x <- x[, c(1, 6, 7, 17, 18, 19, 24)]
x <- as.matrix(scale(data_clean[, - c(27, 28)], center = TRUE, scale = TRUE))
mX <- data.matrix(x)
ARX <- arx(data_clean$returns, mc = TRUE, ar = 1,mxreg = mX, vcov.type = 'white')
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 100)
show(indices)
indices <- sis$sis.ix0
show(indices)
reg_indices <- sis$ix
show(reg_indices)
x <- x[, c(1, 6, 7, 17, 18, 19, 24)]
mX <- data.matrix(x)
ARX <- arx(data_clean$returns, mc = TRUE, ar = 1,mxreg = mX, vcov.type = 'white')
gets <-  getsm(ARX)
gets
x <- as.matrix(scale(data_clean[, - c(27, 28)], center = TRUE, scale = TRUE))
sis <- SIS(x, y, family = 'gaussian', penalty = 'SCAD', tune = 'cv', nfolds = 10, nsis = 100)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'MCP', tune = 'cv', nfolds = 10, nsis = 100)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 100)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 26)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
ARX <- arx(data_clean$returns, mc = TRUE, ar = 1,mxreg = mX, vcov.type = 'white')
gets <-  getsm(ARX)
gets
mX <- data.matrix(x)
# ARX model
ARX <- arx(data_clean$returns, mc = TRUE, ar = 1,mxreg = mX, vcov.type = 'white')
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 20)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 2)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 26)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 25)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 20)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 15)
indices <- sis$sis.ix0
reg_indices <- sis$ix
show(indices)
show(reg_indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 26)
indices <- sis$sis.ix0
show(indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 100)
indices <- sis$sis.ix0
show(indices)
sis <- SIS(x, y, family = 'gaussian', penalty = 'lasso', tune = 'cv', nfolds = 10, nsis = 26)
indices <- sis$sis.ix0
show(indices)
x <- x[, c(1, 2, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 23, 24, 25, 26)]
mX <- data.matrix(x)
ARX <- arx(data_clean$returns, mc = TRUE, ar = 1,mxreg = mX, vcov.type = 'white')
gets <-  getsm(ARX)
gets
gets <-  getsm(ARX, arch.LjungB = NULL)
gets
install.packages("msaenet")
library(msaenet)
aEN <- aenet(x, y, family = "gaussian", init = "enet", alphas = a, tune = "cv", nfolds = 10, rule = 'lambda.min', seed = (1000))
a <- seq (0.001, 0.9, 0.01)
aEN <- aenet(x, y, family = "gaussian", init = "enet", alphas = a, tune = "cv", nfolds = 10, rule = 'lambda.min', seed = (1000))
aEN
which(! coef(opt_En) == 0, arr.ind = TRUE)
which(! coef(aEn) == 0, arr.ind = TRUE)
which(! coef(aEN) == 0, arr.ind = TRUE)
lasso <- cv.glmnet(x, y, alpha = 1, lambda = lambda, standardize = T, nfolds = 10)
lambda <- 10^seq(-5, 5, length.out = 100)
lasso <- cv.glmnet(x, y, alpha = 1, lambda = lambda, standardize = T, nfolds = 10)
best_lambda <- lasso$lambda.min
print(best_lambda)
opt_lasso <- glmnet(x, y, alpha = 1, lambda = best_lambda, standardize = T)
which(! coef(opt_lasso) == 0, arr.ind = TRUE)
which(! coef(lasso) == 0, arr.ind = TRUE)
summary(opt_lasso)
aSCAD <- asnet(x, y, family = "gaussian", init = "enet", alphas = a, tune = "cv", nfolds = 10, seed = (1000))
which(! coef(aSCAD) == 0, arr.ind = TRUE)
aSCAD <- asnet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, seed = (1000))
which(! coef(aSCAD) == 0, arr.ind = TRUE)
MSaEN <- msaenet(x, y, family = "gaussian", init = "enet", alphas = a, tune = "cv", nfolds = 10, nsteps = 10, seed = (1000))
which(! coef(MSaEN) == 0, arr.ind = TRUE)
# Multi Step Adaptive SCAD
MSaEN <- msaenet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, nsteps = 10, seed = (1000))
which(! coef(MSaEN) == 0, arr.ind = TRUE)
MSaSCAD <- msaenet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, nsteps = 10, seed = (1000))
which(! coef(MSaSCAD) == 0, arr.ind = TRUE)
MSaSCAD <- msasnet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, nsteps = 10, seed = (1000))
which(! coef(MSaSCAD) == 0, arr.ind = TRUE)
SCAD <- msaenet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, nsteps = 1, seed = (1000))
which(! coef(MSaEN) == 0, arr.ind = TRUE)
install.packages("ncvreg")
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), returnY=FALSE, trace=FALSE)
library(ncvreg)
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), returnY=FALSE, trace=FALSE)
which(! coef(MSaEN) == 0, arr.ind = TRUE)
source('C:/Users/Lucas/Desktop/Cours/Big Data/Script.R')
plot(SCAD)
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), returnY=FALSE, trace=FALSE, penalty = 'SCAD')
plot(SCAD)
summary(SCAD)
View(SCAD)
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), lambda = lambda returnY=FALSE, trace=FALSE, penalty = 'SCAD')
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), lambda = lambda, returnY=FALSE, trace=FALSE, penalty = 'SCAD')
summary(SCAD, lambda = 0.0015)
print(sum[['fit']][['beta']])
print(sum@fit$beta)
x <- as.matrix(scale(data_clean[, - c(27, 28)], center = TRUE, scale = TRUE))
# Big Data project for M2 EKAP
library(readxl)
library(gets)
library(glmnet)
library(corrplot)
library(tidyverse)
library(doParallel)
library(tseries)
library(lmtest)
library(ggplot2)
library(rpart)
library(randomForest)
library(gbm)
library(caret)
library(partykit)
library(PerformanceAnalytics)
library(FinTS)
library(diveRsity)
library(SIS)
library(msaenet)
library(ncvreg)
setwd("/Users/Lucas/Desktop/Cours/Big Data")
data = data.frame(read_excel('data.xlsx')[1 : 980,])
summary(data)
y <- as.matrix(scale(data[, 2], center = TRUE, scale = FALSE))
y <- diff(y)
data <- data[- 1, ]
data$returns <- y
ggplot(mapping = aes(x = date, y = Index), data)+
geom_line(col = 'steelblue')+
theme_minimal()
ggplot(mapping = aes(x = date, y = returns), data)+
geom_line(col = 'steelblue')+
theme_minimal()
# Loop for stationarity tests
stat.tests <- function(data){
var_non_stat <<- data[- 1,]
for(i in 1 : ncol(data)){
adf <- FALSE
kpss <- FALSE
q <- FALSE
ar <- FALSE
if(adf.test(data[, i])$p.value > 0.05){
adf = TRUE
}
if(kpss.test(data[, i])$p.value < 0.05){
kpss = TRUE
}
if(Box.test(data[, i], lag = 1, type = c("Ljung-Box"))$p.value < 0.05){
q = TRUE
}
if(arima(x = y, order = c(1,0,0))[["coef"]][["ar1"]] > 0.7){
ar = TRUE
}
if(adf & kpss | adf & q | adf & ar | kpss & ar | kpss & q | ar & q == TRUE){
print(paste('variable :', names(data[i]), 'non-stationnaire'), sep = ' ')
var_non_stat[i] <<- diff(data[, i])
names(var_non_stat[i]) <<- names(data[, i])
}
}
}
# Checking for stationarity
stat.tests(data)
# Outliers detection
data_clean = var_non_stat
for (i in 1 : 28){
y=ts(var_non_stat[, i])
clean=Return.clean(y, method = "boudt")
clean=ts(clean)
data_clean[, i] <- clean
names(data_clean[i]) <- names(data[, i])
}
var_non_stat$num <- seq(1, 978, 1)
data_clean$num <- seq(1, 978, 1)
# Outliers plots
for (i in 1 : 28){
print(ggplot(mapping = aes(x = num, y = var_non_stat[, i]), var_non_stat)+
geom_line(color = 'red')+
geom_line(aes(x = num, y = data_clean[, i]), data = data_clean, col = 'steelblue')+
theme_minimal()+
ggtitle(names(data_clean[i]))+
ylab(names(data_clean[i]))+
xlab('time'))
}
# Desc. Statistics
data_clean <- data_clean[, -c(1, 2)]
for(i in 1:28){
print(names(data_clean[i]))
print(FinTS.stats(data_clean[, i]))
}
ybreaks <- seq(0,50,5)
ggplot(mapping = aes(x = returns), data_clean)+
geom_density(fill = 'steelblue')+
stat_function(fun = dnorm, args = list(mean = 2.5474, sd = 30.927), color = 'red')+
scale_x_continuous(limits = c(-100, 100))+
theme_minimal()
# Correlations
cor_comp <- cor(data_clean[, 1 : 27], use = 'complete.obs', method = c("spearman"))
corrplot(cor_comp, method = 'circle', type = 'upper', tl.col = "black")
# X and Y in matrix form
x <- as.matrix(scale(data_clean[, - c(27, 28)], center = TRUE, scale = TRUE))
y <- as.matrix(scale(data_clean[, 27], center = TRUE, scale = TRUE))
y <- as.numeric(y)
lambda <- 10^seq(-5, 5, length.out = 100)
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), returnY=FALSE, trace=FALSE, penalty = 'SCAD')
plot(SCAD)
sum <- summary(SCAD, lambda = 0.0015)
sum
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), returnY=FALSE, trace=FALSE, penalty = 'SCAD')
plot(SCAD)
opt_SCAD <- ncvreg(x, y, lamnda = SCAD$lambda.min, alpha = 1, penalty = 'SCAD')
summary(opt_SCAD)
opt_SCAD <- ncvreg(x, y, lambda = best_lambda, alpha = 1, penalty = 'SCAD')
best_lamnda <- SCAD$lambda.min
opt_SCAD <- ncvreg(x, y, lambda = best_lambda, alpha = 1, penalty = 'SCAD')
best_lambda <- SCAD$lambda.min
opt_SCAD <- ncvreg(x, y, lambda = best_lambda, alpha = 1, penalty = 'SCAD')
which(! coef(aEN) == 0, arr.ind = TRUE)
which(! coef(opt_SCAD) == 0, arr.ind = TRUE)
opt_SCAD <- ncvfit(x, y, lambda = best_lambda, alpha = 1, penalty = 'SCAD')
which(! coef(opt_SCAD) == 0, arr.ind = TRUE)
opt_SCAD <- ncvreg(x, y, lambda = best_lambda, alpha = 1, penalty = 'SCAD')
which(! coef(opt_SCAD) == 0, arr.ind = TRUE)
View(data_clean)
fit.control <- trainControl(method = 'repeatedcv', number = 5, repeats = 10,
search = 'grid')
tune.mtry <- expand.grid(.mtry = (1 : 10))
rdf_grid <- train(returns ~ ., data = data_clean[, 1 : 27], method = 'rf', metric = 'RMSE',
tuneGrid = tune.mtry, trControl = fit.control)
print(rdf_grid)
plot(rdf_grid)
fit.control <- trainControl(method = 'repeatedcv', number = 5, repeats = 10,
search = 'grid')
tune.mtry <- expand.grid(.mtry = (1 : 20))
rdf_grid <- train(returns ~ ., data = data_clean[, 1 : 27], method = 'rf', metric = 'RMSE',
tuneGrid = tune.mtry, trControl = fit.control)
print(rdf_grid)
plot(rdf_grid)
fit.control <- trainControl(method = 'repeatedcv', number = 5, repeats = 10,
search = 'grid')
tune.mtry <- expand.grid(.mtry = (10 : 25))
rdf_grid <- train(returns ~ ., data = data_clean[, 1 : 27], method = 'rf', metric = 'RMSE',
tuneGrid = tune.mtry, trControl = fit.control)
plot(rdf_grid)
clear
clear()
l(
)
# Big Data project for M2 EKAP
library(readxl)
library(gets)
library(glmnet)
library(corrplot)
library(tidyverse)
library(doParallel)
library(tseries)
library(lmtest)
library(ggplot2)
library(rpart)
library(randomForest)
library(gbm)
library(caret)
library(partykit)
library(PerformanceAnalytics)
library(FinTS)
library(diveRsity)
library(SIS)
library(msaenet)
library(ncvreg)
setwd("/Users/Lucas/Desktop/Cours/Big Data")
data = data.frame(read_excel('data.xlsx')[1 : 980,])
View(data)
y <- as.matrix(scale(data[, 2], center = TRUE, scale = FALSE))
y <- diff(y)
data <- data[- 1, ]
data$returns <- y
stat.tests <- function(data){
var_non_stat <<- data[- 1,]
for(i in 1 : ncol(data)){
adf <- FALSE
kpss <- FALSE
q <- FALSE
ar <- FALSE
if(adf.test(data[, i])$p.value > 0.05){
adf = TRUE
}
if(kpss.test(data[, i])$p.value < 0.05){
kpss = TRUE
}
if(Box.test(data[, i], lag = 1, type = c("Ljung-Box"))$p.value < 0.05){
q = TRUE
}
if(arima(x = y, order = c(1,0,0))[["coef"]][["ar1"]] > 0.7){
ar = TRUE
}
if(adf & kpss | adf & q | adf & ar | kpss & ar | kpss & q | ar & q == TRUE){
print(paste('variable :', names(data[i]), 'non-stationnaire'), sep = ' ')
var_non_stat[i] <<- diff(data[, i])
names(var_non_stat[i]) <<- names(data[, i])
}
}
}
# Checking for stationarity
stat.tests(data)
data_clean = var_non_stat
for (i in 1 : 28){
y=ts(var_non_stat[, i])
clean=Return.clean(y, method = "boudt")
clean=ts(clean)
data_clean[, i] <- clean
names(data_clean[i]) <- names(data[, i])
}
var_non_stat$num <- seq(1, 978, 1)
data_clean$num <- seq(1, 978, 1)
for (i in 1 : 28){
print(ggplot(mapping = aes(x = num, y = var_non_stat[, i]), var_non_stat)+
geom_line(color = 'red')+
geom_line(aes(x = num, y = data_clean[, i]), data = data_clean, col = 'steelblue')+
theme_minimal()+
ggtitle(names(data_clean[i]))+
ylab(names(data_clean[i]))+
xlab('time'))
}
data_clean <- data_clean[, -c(1, 2)]
x <- as.matrix(scale(data_clean[, - c(27, 28)], center = TRUE, scale = TRUE))
y <- as.matrix(scale(data_clean[, 27], center = TRUE, scale = TRUE))
y <- as.numeric(y)
lambda <- 10^seq(-5, 5, length.out = 100)
ridge <- cv.glmnet(x, y, alpha = 0, lambda = lambda, standardize = T, nfolds = 10)
best_lambda <- ridge$lambda.min
opt_ridge <- glmnet(x, y, alpha = 0, lambda = best_lambda, standardize = T)
which(! coef(opt_ridge) == 0, arr.ind = TRUE)
print(best_lambda)
plot(ridge)
bridge <- cv.bridge(x, y, q = 0.5, lambda = lambda, nfolds = 10)
install.packages("rbridge")
library(rbidge)
library(rbridge)
bridge <- cv.bridge(x, y, q = 0.5, lambda = lambda, nfolds = 10)
plot(ridge)
best_lambda <- bridge$lambda.min
opt_bridge <- bridge(x, y, q = 0.5, lambda = best_lambda)
which(! coef(opt_bridge) == 0, arr.ind = TRUE)
summary(opt_bridge)
which(! coef(opt_bridge) == 0, arr.ind = TRUE)
View(bridge)
View(opt_bridge)
# Exctracting coeffs
which(! coef(opt_bridge) == 0)
opt_bridge <- bridge(x, y, q = 0.5, lambda = best_lambda)
which(! coef(opt_bridge) == 0, arr.ind = TRUE)
print(coef(opt_bridge))
# Exctracting coeffs
opt_ridge$beta
lasso <- cv.glmnet(x, y, alpha = 1, lambda = lambda, standardize = T, nfolds = 10)
best_lambda <- lasso$lambda.min
opt_lasso <- glmnet(x, y, alpha = 1, lambda = best_lambda, standardize = T)
which(! coef(opt_lasso) == 0, arr.ind = TRUE)
View(data_clean)
alasso <- glmnet(x, y, alpha = 1, lambda = lambda, standardize = T, nfolds = 10)
coef_lasso <- predict(alasso, type = 'coef', s = best_lambda)
gamma = 0.5
w0 <- - 1 / (abs(coef_lasso) + (1 / length(y)))
weights <- w0^gamma
alasso <- cv.glmnet(x, y, alpha = 1, penalty.factors = weights, nfolds = 10)
best_lambda <- alasso$lambda.min
opt_alasso <- cv.glmnet(x, y, alpha = 1, lambda = lambda, penalty.factors = weights, nfolds = 10)
which(! coef(opt_alasso) == 0, arr.ind = TRUE)
a <- seq (0.001, 0.9, 0.01)
search <- foreach(i = a, .combine = rbind) %dopar% {
En <- glmnet::cv.glmnet(x, y, alpha = i, lambda = lambda, standardize = T, nfolds = 10)
data.frame(cvm = En$cvm[En$lambda == En$lambda.min], lambda.1se = En$lambda.1se, alpha = i)
}
best_params <- search[search$cvm == min(search$cvm), ]
best_lambda <- best_params$lambda.1se
opt_En <- glmnet(x, y, lambda = best_lambda, standardize = T, alpha = best_params$alpha)
which(! coef(opt_En) == 0, arr.ind = TRUE)
SCAD <- cv.ncvreg(x, y, nfolds=10, seed = (1000), returnY=FALSE, trace=FALSE, penalty = 'SCAD')
best_lambda <- SCAD$lambda.min
opt_SCAD <- ncvreg(x, y, lambda = best_lambda, alpha = 1, penalty = 'SCAD')
which(! coef(opt_SCAD) == 0, arr.ind = TRUE)
aEN <- aenet(x, y, family = "gaussian", init = "enet", alphas = a, tune = "cv", nfolds = 10, rule = 'lambda.min', seed = (1000))
which(! coef(aEN) == 0, arr.ind = TRUE)
aSCAD <- asnet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, seed = (1000))
which(! coef(aSCAD) == 0, arr.ind = TRUE)
MSaEN <- msaenet(x, y, family = "gaussian", init = "enet", alphas = a, tune = "cv", nfolds = 10, nsteps = 10, seed = (1000))
which(! coef(MSaEN) == 0, arr.ind = TRUE)
MSaSCAD <- msasnet(x, y, family = "gaussian", init = "snet", alphas = a, tune = "cv", nfolds = 10, nsteps = 10, seed = (1000))
which(! coef(MSaSCAD) == 0, arr.ind = TRUE)
gamma = 0.5
mu = 0.1
cor <- cor(x)
sign <- sign(cor) - diag(2, nrow(cor))
weights <- (abs(cor)^gamma - 1 * (abs(cor) == 1)) / (1 - abs(cor) * (abs(cor) != 1))
weights.vec <- apply(weights, 1 , sum)
penalty <- -sign * (weights + diag(weights.vec))
R <- chol(penalty, pivot = TRUE)
p <- dim(x)[2]
x_ <- rbind(x, sqrt(mu) * R)
y_ <- c(y, rep(0, p))
wfLASSO <- cv.glmnet(x_, y_)
View(wfLASSO)
which(! coef(wfLASSO) == 0, arr.ind = TRUE)
fit.control <- trainControl(method = 'repeatedcv', number = 5, repeats = 10,
search = 'grid')
tune.mtry <- expand.grid(.mtry = (10 : 25))
rdf_grid <- train(returns ~ ., data = data_clean[, 1 : 27], method = 'rf', metric = 'RMSE',
tuneGrid = tune.mtry, trControl = fit.control)
